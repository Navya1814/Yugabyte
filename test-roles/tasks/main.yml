# # Step1: Set up NTP using chrony
#     - name: Install chrony package
#       package:
#         name: chrony
#         state: present

#     # Step2: Ensure chrony service is running and enabled
#     - name: Ensure chronyd service is running
#       systemd:
#         name: chronyd
#         state: started
#         enabled: yes
#       register: chronyd_service

#     # Step3: Set ulimits for YugabyteDB in /etc/security/limits.conf
#     - name: Set system ulimits for YugabyteDB
#       lineinfile:
#         path: "/etc/security/limits.conf"
#         line: "{{ item }}"
#         create: yes
#       loop:
#         - "{{yugabyte_user}} soft nofile 1048576"  # Max open files
#         - "{{yugabyte_user}} hard nofile 1048576"  # Max open files
#         - "{{yugabyte_user}} soft nproc 12000"     # Max user processes
#         - "{{yugabyte_user}} hard nproc 12000"     # Max user processes
#         - "{{yugabyte_user}} soft stack 8192"      # Stack size (kbytes)
#         - "{{yugabyte_user}} hard stack 8192"      # Stack size (kbytes)
#         - "{{yugabyte_user}} soft memlock 64"      # Max locked memory (kbytes)
#         - "{{yugabyte_user}} hard memlock 64"      # Max locked memory (kbytes)
#         - "{{yugabyte_user}} soft cpu unlimited"   # CPU time limit (seconds)
#         - "{{yugabyte_user}} hard cpu unlimited"   # CPU time limit (seconds)
#         - "{{yugabyte_user}} soft fsize unlimited" # File size limit (blocks)
#         - "{{yugabyte_user}} hard fsize unlimited" # File size limit (blocks)
#         - "{{yugabyte_user}} soft data unlimited"  # Data segment size (kbytes)
#         - "{{yugabyte_user}} hard data unlimited"  # Data segment size (kbytes)
#         - "{{yugabyte_user}} soft rss unlimited"   # Max memory size (kbytes)
#         - "{{yugabyte_user}} hard rss unlimited"   # Max memory size (kbytes)
#         - "{{yugabyte_user}} soft vmem unlimited"  # Virtual memory size (kbytes)
#         - "{{yugabyte_user}} hard vmem unlimited"  # Virtual memory size (kbytes)
#         - "{{yugabyte_user}} soft msgqueue 819200" # POSIX message queues (bytes)
#         - "{{yugabyte_user}} hard msgqueue 819200" # POSIX message queues (bytes)
#         - "{{yugabyte_user}} soft locks unlimited" # File locks
#         - "{{yugabyte_user}} hard locks unlimited" # File locks
#         - "{{yugabyte_user}} soft core unlimited"  # Core file size (blocks)
#         - "{{yugabyte_user}} hard core unlimited"  # Core file size (blocks)
#         - "{{yugabyte_user}} soft sigpending 119934"  # Pending signals
#         - "{{yugabyte_user}} hard sigpending 119934"  # Pending signal
#       notify:
#         - Reload limits

#     # Step4: Configure kernel parameters (swappiness, core pattern, and max map count)
#     - name: Configure kernel parameters (swappiness, core pattern, and max map count)
#       sysctl:
#         name: "{{ item.key }}"
#         value: "{{ item.value }}"
#         state: present
#         reload: yes
#       loop:
#         - { key: "vm.swappiness", value: "0" }
#         - { key: "kernel.core_pattern", value: "/home/yugabyte/cores/core_%p_%t_%E" }
#         - { key: "vm.max_map_count", value: "262144" }
#       notify:
#         - Reload sysctl

    # Step5: Ensure transparent hugepages are always enabled
    - name: Ensure transparent hugepages are always enabled
      lineinfile:
        path: "{{ grub_config_file }}"
        line: "{{ grub_line }}"
        state: present
        create: yes
      notify:
       - Rebuild GRUB configuration

    # Step6: Change ownership of the directory recursively to ubuntu:ubuntu
    - name: Ensure /home/yugabyte-user are accessible to the service user
      ansible.builtin.file:
        path: "{{ item }}"
        mode: '0755'
      loop:
        - /home
        - /home/yugabyte-user

    - name: Change ownership of the directory recursively and Add write permission for the user
      ansible.builtin.file:
        path: "{{ yugabyte_home }}/openssl-config"
        owner: yugabyte-user
        mode: u+w

    # Step7: Run post-installation script and ensure proper file permissions
    - name: Run post-installation script
      command: "{{ yugabyte_post_install_script }}"
      args:
        chdir: "{{ yugabyte_home }}"

    # Step8: Create YugabyteDB systemd service file if it does not exist
    # Step 8: Create YugabyteDB systemd service file if it does not exist
    - name: Check if yugabytedb service file exists
      stat:
        path: "{{ yugabyte_service_file }}"
      register: yugabytedb_service_file

    - name: Deploy yugabytedb systemd service
      template:
        src: yugabytedb.service.j2
        dest: "{{ yugabyte_service_file }}"
      when: not yugabytedb_service_file.stat.exists
      notify: restart yugabytedb.service

    - name: Enable and start yugabytedb service
      systemd:
        name: yugabytedb.service
        enabled: yes
        state: started


    
   
        

      

